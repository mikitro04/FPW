Introduzione:
    Useremo:
        HTML
        CSS
        SQL
        JavaScript
        Node.js 
        Express.js 
        Vue.js 
        PostgreSQL

    Consegna progetto entro 31 Gennaio 2026
        Giugno / Luglio / Settembre / Gennaio

    Metà del voto finale è Teoria, l'altra metà pratica (progetto)

    Due parziali:
        - 23 Aprile (Primo Parziale)
        - 28 Maggio (2° Parziale e Primo appello di Teoria)

    Punti Bonus:
        + Fare parziali +1pt
        + progetto entro Giugno 2025 +1pt
        progetto entro Luglio 2025 +0.5pt
        Per un massimo di 32/30

--------------------------------------------------------------------------------
05/03/2025

    App web statica: app web in cui crei pagine, le metti in un FS del Server; accedi alla pagina web e il server ti mette a disposizione quei file.

    App web dinamica: sul FS rimane uguale, chiedo al server di darmi l'accesso, ma quelle pagine non sono file statici, ma sono una risorsa differente confezionata al monmento della richiesta. La pagina web viene confezionata AL MOMENTO.

    e.g.
    Statica: siti vetrina. Qualsiasi monento accedi la pagina web rimane uguale
    Dinamica: Facebook. Due perosne diverse che accedono vedono due pagine in base alle proprie caratteristiche

    SUDDIVISIONE TRA CLIENT E SERVER

    SERVER: Macchina che sta da qualche parte fisicamente che offre dei servizi: le pagine web
    CLIENT: persone che accedono ai servizi del server (Browser web, applicazioni del telefono, ecc..)

    Struttura che useremo noi: client e server sulla stessa macchina

    Attore principale: Browser. Ci permette di interrogare il server e farci mandare delle risorse. è in grado di prendere quelle risorse e renderizzarle

    Il server ci manda qualcosa di testuale (codice)

    In passato non tutti i Browser erano uniformati nello stesso standard (e.g. Internet Explorer)

    Parlano tra di loro grazie al protocollo HTTP. Versione più usata HTTP/1.1 del '99
    Le altre versioni sucessive sono retrocompatibili con questa

    HTTP = Hyper Text Trasfert Protocol 

    Come funziona HTTP:
        Protocollo a domanda-risposta: ad ogni domanda del client, il server da una risposta (Positiva o negativa)

        Protocollo senza stato, nel senso che ogni comunicazione non è legata con le altre

        Le richiesye viaggiano sul protocollo di trasporto TCP che garantisce la consegna della domanda e della risposta

        Rispetto alla prima versione, la versione HTTP/1.1 ha permesso il traffico di diverse richieste contemporaneamente

    La rchiesta del client viene passata al DNS che trasforma il link e.g. Facebook.com nell'indirizzo IP che verrà poi mandato al server
    La richiesta dal DNS viene rimbalzata al client che avendo l'indirizzo IP della pagina richiesta lo manda al server che accederà poi al File System da cui poi prenderà la pagina richiesta
    Una volta terminato chiudo il canale di comunicazione

    Richiesta HTTP:
        - Risorsa richiesta
        - Metodo: quale azione viene richiesta dal server   
            GET: informazioni della query visualizzate in chiaro 
            POST: informazioni nascoste nel campo dell'URL
            HEAD: come GET
        - Header:
            - Accept: tipologie di contenuto accettate
            - Connection: mantenimento della connesione TCP
            - Accept-Lenguage
            - ecc..
        - Protocollo

    Risposta HTTP:
        - Protocollo
        - Codice di stato
            - tra 200 e 299 successo
                - e.g. 200: OK 
            - tra 300 e 399 reindirizzamento verso un altro server
                - e.g. 301: Pagina spostata
            - tra 400 e 499 errore client
                - e.g. 400 Bad Request
                - e.g. 403 Forbidden
                - e.g. 404 File not found
            - tra 500 e 599 errore server
                - e.g. 500 Server Error
        - Frase di stato
        - Header:
            - Allow: Metodi HTTP accettati dal server
            - Content lenght: dimensione in bytes
            - Content type
            - Date
            - Expires
            - Location

    Cookies:
        Il browser invia richieste al server, il server risponde e da anche un cookies, ovvero un identificatore che servirà al prossimo accesso al server.

    HTTP è un protocollo non cifrato

    HTTPS invece è criptato, permette di avere una comunicazione sicura ma più lenta. I pacchetti sono gli stessi

    URL: Uniform Resource Locate:
        - Protocollo (e.g. HTTP)
        - ://
        - nome host
        - :
        - porta
        - /
        - percorso
        - ?
        - query string
        - #
        - fragment

--------------------------------------------------------------------------------
06/03/2025

	HTML definisce la struttura ma non il layout

	HTML = Hyper Text Markup Lenguage
	Linguaggio di Markup NON di programmazione

	HTML tag: keyword racchiusa tra < ... >
	    e.g. <img ..>

	    Il tag si chiude mettendo all'inizio della parentesi angolare il / -> </ ... >
	    e.g. <h1> Titolo </h1>
	    Tra le parentesi angolare è presente un elemento

	    I tag "self closing" son odei tag senza bisogno di essere chiusi (e.g. <br/>)

	    Gli attributi sono all'interno del tag
	    e.g. <a href = "https://..."> Esempio di link </a>   =>  questo è un esempio di un link
	    "a" sta per "ancora"

	    Attributi classici:
		+ class: uno o più classi associate ad un elemento
		+ id: identificatore univoco per un elemento
		+ name: un nome per l'elemento
		+ style: uno stile CSS specificato come attributo
		+ title: informazione supplemenrare su un elemento

	Versione standard HTML 5.0 (non ultima versione)
	Attraverso https://www.validator.w3.org si può verificare se ciò che abbiamo scritto rispetti gli standard 

	Struttura classica di una pagina HTML:
	    <!DOCTYPE html>
		<html>
		    <head>          <!--ciò che non viene visualizzato nella pagina-->
		        ...
		    </head>

		    <body>          <!--ciò che viene visualizzato nella pagina-->
		        ...
		    </body>
		</html>

	La struttura di una pagina web è un albero

	L'head contiene le informazioni generali della pagina:
	    + Titolo
	    + dove si trova il foglio CSS
	    + come includere lo script 
	    + Fornisce meta-informazioni

	    Risorse esterne nell'head tramite il tag link (i file CSS)

	    "style" definisce le informazioni riguardo la presentazione del documento (anche se possono stare nell'HTML la definiremo su file esterni)

	    "meta" definisce informazioni sul documento HTML (keywords, descriptions, author, refresh (rate), ecc..)
	    <meta charset = "utf-8" />

	Il body è il corpo della pagina web:
	    Titoli visivi:
		<hn> con n che va da 1 a 6 (1 il più importante, 6 meno importante)
		ci deve essere SOLO un <h1> e quanti <h2..6> vogliamo

	    Paragrafi con tag <p> e </p>

	    <hr> crea una linea orizzontale

	    <br> o <br/> va a capo (in C \n)

	    Formati del testo:
		+ Grassetto
		    <strong> e <b>
		    strong è un tag semantico e indica un testo più importante
		    b rende il testo in grassetto
		    fanno la stessa cosa ma la semantica è diversa
		    PER LE PERSONE RINCOGLIONITE SI USA STRONG
		+ Corsivo
		    tag <i> (italic) e <em> (significato semantico)
		+ Sottolineato: <ins>
		+ Codice: tag <code>
		+ Sottolineato: <sub>
		+ Evidenziato: <mark>
		+ Barrato: <del>

--------------------------------------------------------------------------------
13/03/2025

Web Application:
    è divisa in 3 parti fondamentali:
        + CLIENT:
            - è la parte con cui l'utente interagisce direttamente tramite un'interfaccia
            - è responsabile di inviare richieste per ottenere dati
            - oltre essere sviluppato su HTML e CSS, vengono anche usati freamework di JavaScript come Vue.js, React e Angular
        + SERVER:
            - è il computer remoto che accede al database per recuperare o memorizzare i dati
            - coordina le attività per il client
            - per sviluppare e gestire un server vengono utilizzate tecnologie come Note.js, Java, o PHP
        + DATABASE:
            - è un sistema di archiviazione dei dati, ai quali il client può farci un qualsiasi tipo di operazione
            -  MySQL e MongoDB sono tra i database più popolari usati con le applicazioni web
    Noi useremo HTML, CSS, JavaScript e SQL

Vue.js:
    + freamework di JavaScript basato su HTML e CSS
    + permette di semplificare lo sviluppo consentendo allo sviluppatore di concentrarsi sulla logica dell'applicazione e sulla gestione dello stato attraverso la scrittura del codice JavaScript
     mentre Vue.js pensa all'aggiornamento dell'interfaccia utente
    + l'interfaccia utente viene suddivisa in componenti riutilizzabili e modulari, quindi ogni componente può avere il suo stato, comportamento e template associato
    
    dopo un murigo l'ho installato

    Passi per lavorare con Vue.js:
        1. Avere Node.js e npm installato
        2. Assicurarsi di avere le versioni giuste, sincronizzate che possano lavorare tra di loro (Chiedi a ChatGPT)
        3. Creare il progetto usando il comando "npm create vue@latest"
            3.1. una volta eseguito il comando ci appariranno delle funzionalità opzionali come il nome e se vuoi aggiungere il TypeScript
            3.2. entra nella direcroty del progetto (Da terminale per ovviamente) usa il comando "cd <nome-progetto>"
            3.3. esegui il comando "npm install"
        4. per lavorare sull'applicazione e testarla dal vivo esegui "npm run dev"
        5. quando si è pronti a inviare l'applicazione in produzione esegui "npm run build"
    - (useless) Nella cartella ./dist del progetto finiscono i risultati delle operazioni di ottimizzazione del progetto creato
    - File del progetto rilevanti:
        + package.json: contiene informazioni sul progetto come nome, versione, scripts e dipendenze
        + index.html: punto di ingresso HTML
        + src: codice sorgente dell'applicazione (directory)
            * assets: risorse statiche
            * components
            * router
            * stores
            * views
            * App.vue: componente principale Vue che contiene l'intera applicazione
            * main.js: punto di ingresso del codice JavaScript dell'intera applicazione
        + vite.config.js: serve per collegare back-end e front-end
